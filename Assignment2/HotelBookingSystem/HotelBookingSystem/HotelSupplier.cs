using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;


namespace HotelBookingSystem
{
    public delegate void priceCutEvent();
    class HotelSupplier
    {
        public static event priceCutEvent pricecut;
        public static Int32 totalNoOfRooms = 500;
        public static Int32 noOfRoomsBooked = 0;
        static Random rng = new Random();

        private static Int32 currentRoomPrice;
        public Int32 noOfRoomsTobeBooked;
        private static Int32 count_value = 1;
        public bool initial_flag = true;

        /*public HotelSupplier()
        {
            currentRoomPrice = 50;
            noOfRoomsTobeBooked = 0;
          //  count_value = 0;

        }*/
        public Int32 getPrice()
        {
            return currentRoomPrice;
        }

        public Int32 getNoofRooms()
        {
            return (totalNoOfRooms - noOfRoomsBooked);
        }
        public String getThreadName()
        {
            return Thread.CurrentThread.Name;
        }
        public void changeprice()
        {

           
                Int32 roomsAvailable = (totalNoOfRooms - noOfRoomsBooked);
                Int32 oldRoomPrice = getPrice();
                currentRoomPrice = pricingModel();

                if (currentRoomPrice < oldRoomPrice || currentRoomPrice < 25)
                {

                    //
                    //
                    //
                    //
                    if (pricecut != null)
                    {




                        Console.WriteLine("*****************PRICE CUT EVENT GENERATED BY HOTEL SUPPLIER:{0} **************", Thread.CurrentThread.Name);
                        Console.WriteLine("The NEW PRICE is {0}", currentRoomPrice, "OLD PRICE IS {1}", oldRoomPrice);
                        pricecut();
                        count_value++;
                        Thread.Sleep(100);
                    }
                    
                }
                else
                {
                    Console.WriteLine("No Price Cut");
                }

                

             
        }

        public static Int32 getTodaysPrice()
        {
            // values for days starting from sunday at index 0 and saturday at index 6
            Int32[] day_array = { 8, 3, 5, 4, 6, 2, 9 };
            Int32 getTodaysPrice = -1;
            Int32 i = (rng.Next(0, 7));
            getTodaysPrice = day_array[i];
            return getTodaysPrice;
        }

        public Int32 pricingModel()
        {
            string time = DateTime.Now.ToString("tt");

            //Console.WriteLine("time of the day {0}", time);

            Int32 paddValue;
            Int32 price = -1;


            if ((time.Equals("AM") || rng.Next(0,10)<5) &&  noOfRoomsBooked > 25 )
                paddValue = 20;
            else if (time.Equals("AM")|| rng.Next(0,10)<5)
                paddValue = 10;
            else
                paddValue = 5;

            if (totalNoOfRooms < noOfRoomsTobeBooked || noOfRoomsBooked == totalNoOfRooms)
                Console.WriteLine("There are no rooms available to book");
            else
            {
                price = getTodaysPrice() + paddValue;
            }

            return price;
        }



        public void orderProcessing()
        {

            Int32 unitPrice = pricingModel();

            string str_obj = MultiCellBuffer.getOneCell();

            object obj = Decoder.Decode(str_obj);

            OrderClass oc = (OrderClass)obj;

            double taxPercentage = 12.5;
            Int32 locationCharge = 10;
            noOfRoomsTobeBooked = oc.Amount;

            string cardNumber = EncryptionDecryption.Encryption(oc.CardNo);
            //validate card number using bank service
           // ServiceReference1.ServiceClient sc = new ServiceReference1.ServiceClient();
            if (BankService.validateCardNo(cardNumber) == true)    
            {
                // caluculate the total price
                double Tax = taxPercentage * (unitPrice * noOfRoomsTobeBooked);
                double totalPrice = unitPrice * noOfRoomsTobeBooked + Tax + locationCharge;

                // send confirmation to travel agency

                Confirmation.setOneCell(oc.SenderId);
                Console.WriteLine(Thread.CurrentThread.Name + " has Placed Order for Processing and Confirmation is sent.");
                noOfRoomsBooked += noOfRoomsTobeBooked;
           }


        }




        public void initateOrderProcessing()
        {
           Thread.Sleep(100);
            Console.WriteLine("***********INITATITE ORDER PROCESSING *********** for " + count_value + "pricecut event");
            Console.WriteLine("Order Processing Thread for "+Thread.CurrentThread.Name);
            for (Int32 i = 0; i < 5; i++)
            {
                Thread Order_Processing = new Thread(new ThreadStart(orderProcessing));
                Order_Processing.Name = "Order" + Thread.CurrentThread.Name + i;
                Order_Processing.Start();
            }
        }

    }
}